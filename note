1.Go to (nodejs.org)
-download the installer package

2. You will need mysql apache (xampp) for the database
-download the xampp and install

3. Download your IDE (Either PPStorm, Visual Studio,etc)
-

4. Download the cli for Angular
-go to (cli.angular.io)
- use (npm install -g @angular/cli), the(npm install) comes with the noe js


5. Click file on Phptorm
- select (New Project)
-select (Express)
-(View Engine), select (none)
-(Stylesheet), select (plain CSS)
- create your project folder at (Location,by giving it names), example (clear the untiled and put your names)
C:\Users\fackuayi\PhpstormProjects\Ecommerce\untitled
-Example: (C:\Users\fackuayi\PhpstormProjects\Ecommerce\Ecommerce\backend)
-click CREATE

-Everything is now created, you see (bin, node_modules,public,routes,app.js)
- the app.js is the back-end server for express app
-Go inside the (bin) folder, click (www), you can test the server by typing in, console.log('server running');,inside the onListening() method which is located down the file
-Now, go to the IDE terminal ,type (npm start), and see if it will give you the output or not
If it runs you will see the output as (consoled) in the (www) file.
NOTE:The console.log('server is running) as written in the (www) file located down,is what is displayed for your test. By default the (npm start) goes into the (package.json)
file to go and trigger ("start": "node ./bin/www) for the server to display the content in (www)

6. Change the (node) to (nodemon) in the (package.json file)
NB: (nodemon), automatically refreshes the (server) anytime there is a change
- after changing to (nodemon), go to terminal and START NPM again (npm start)
if it throws error, solve the error my installing (nodemon) globally using (npm install -g nodemon)
- Go to your browser and type (localhost:3000)
NOTE: You will see in your IDE terminal that a GET request has been made.

7. On the IDE click (Version Control- VCS) TO Add
-Click (Enable Version Control Integration), click OK
- click on VCS again, click on (Git) commit
-Check all files and directory
- You can uncheck the (node_module) folder
- You can add (comment)
- Click on (commit folder)
-A login window will open (Type in github Name: & Email)
-Go back and click on (Git)
- click on (push)
-click on (Define Remote)
- Now, go to your Github plateform and create a repository, and copy the URL Link
Example: https://github.com/felixTechnology/AngularNodeMysQlEcommerce.git
- paste it in the IDE popup asking for the URL ,to process the PUSH
-click on Master (on top-left) and clear the Master word @ master-origin, afterwards write your initial (push) word (xample: initial-server-setup)


7. FOR DATABASE
- go click on xampp server app
- start the server and database
- go to browser and enter (localhost:80/phpmyadmin)
- create your database by clicking on (New), in your mysql
-give database name (example: amalitech-shop)

NOTE: Foreign-key, is an attribute that link(s) one table to another.
Example: (order) table is linked to (user) table ,by assigning the USER ID to the ORDER ID


8. We need a package in (app.js) called (cors) which means (Cross Origin resource sharing), which helps to share resources with
   different domains
  - Add, var cors = require('cors');
  . Hover over the underline that appears on the above, click on (More actions), click on (install cors)
  . changed all the (vars) to (const)
  - After (const app = express();) which is in (app.js) , introduce a middle-weight  as below, and call and configure the (cors function)
  app.use(cors({
         origin: "*",
         methods: ['GET', 'POST', 'PATCH', 'DELETE', 'PUT'],
         allowedHeaders: 'Content-Type, Authorization, origin, x-Requested-With, Accept'
    }))
 - Remove the below from the (app.js)
 app.use('/', indexRouter);
 app.use('/users', usersRouter);

 9. Create a new folder in your project, and name (config), inside it create a js file (helpers.js)
 - Go to (npmjs.com) and download a package
 - Type in (mysqli) and download by clicking on (mysqli), which is a package by (yutent), it is in Chinnese so write-click with mouse and click to select translate to english
 NOTE: This will let you not write any sql query.
- Go to https://github.com/bytedo/mysqli/blob/HEAD/docs/3.x.md
NOTE: This is a documentation on how to connect to mysqli for query to the database
 - copy (require('mysqli')) from the documentation
 - in your (helpers.js) which is in the folder (config) which you created, paste (require('mysqli')) but put it in a variable as shown below
    Note: const MySqli = require('mysqli'), and hover to click on (install mysqli)
 - connect to the database by following line of code in (helpers.js)

    let conn = new MySqli({
       host: 'localhost',
        post: 3300,
        user: 'root',
        pass: '',
        db: 'amalitech_shop'
    });

    NB: (host, post, user, pass, db), are from the documentation from (npm) platform as stated above in (point 9)

     host, is the local server xampp for your database
     post, is the default port provided in the (npm) documentation
     user, is the user for your mysql database
     pass, is the password to your mysql database, if any just provide it
     db,   is the name of your database

  - create another variable in your (helpers.js), and call an (emit function), to your (conn) variable which is seen above
  - create an export object for the database which will be used in the whole Project
  module.exports = {
      database: db
  }



10. Go inside your routes folder and refactor the (products.js) to (products.js)
- move the (const app = express();) and position under (cors)
- change the variable names of (indexRouter, usersRouter) to (productsRoute,userRoute)
- create the below to use the routes in (app.js)

//Use Routes
app.use('/api/products',productsRoute);
app.use('/api/users',usersRoute);

- Go into (products.js)
. Change the (var) to (const)
.Create , const {database} = require('../config/helpers');
. clear the (next) from the
   router.get('/', function(req,res,next)){}
. clear the content in the router.get() {} scope
